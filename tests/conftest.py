import pytest


@pytest.fixture
def valid_card_inputs():
    """Фикстура с корректными входными данными для карт"""
    return [
        ("Visa 1234567891234567", "Visa 1234 56** **** 4567"),
        ("MasterCard 9876543210987654", "MasterCard 9876 54** **** 4654"),
        ("Maestro 1111222233334444", "Maestro 1111 22** **** 4444"),
    ]


@pytest.fixture
def valid_account_inputs():
    """Фикстура с корректными входными данными для счетов"""
    return [
        ("Счет 98765432198765432198", "Счет **2198"),
        ("Счет 12345678901234567890", "Счет **7890"),
        ("Счет 00000000000000000001", "Счет **0001"),
    ]


@pytest.fixture
def invalid_inputs():
    """Фикстура с некорректными входными данными"""
    return [
        "Visa",
        "Счет",
        "Visa 1234 5678",
        "Счет 1234 5678 9012",
    ]


@pytest.fixture
def valid_accounts():
    """
    Фикстура, возвращающая список валидных номеров счетов и их ожидаемых масок
    """
    return [
        ("98765432198765432198", "**2198"),
        ("12345678901234567890", "**7890"),
        ("00000000000000000000", "**0000"),
        ("11111111111111111111", "**1111")
    ]


@pytest.fixture
def invalid_accounts():
    """
    Фикстура, возвращающая список невалидных входных данных
    """
    return [
        None,
        "",
        "abc",
        "12345",  # слишком короткий номер
        "1234567890123456789012345"  # слишком длинный номер
    ]


@pytest.fixture
def widget_valid_accounts():
    """
    Фикстура для тестирования валидных номеров счетов
    """
    return [
        ("Счет 98765432198765432198", "Счет **2198"),
        ("СЧЕТ 12345678901234567890", "СЧЕТ **7890"),
        ("счет 00000000000000000000", "счет **0000"),
    ]


@pytest.fixture
def valid_cards():
    """
    Фикстура для тестирования валидных номеров карт
    """
    return [
        ("Visa Classic 4444444444444444", "Visa Classic 4444 44** **** 4444"),
        ("MasterCard 5555555555554444", "MasterCard 5555 55** **** 4444"),
        ("Maestro 3333333333333333", "Maestro 3333 33** **** 3333")
    ]


@pytest.fixture
def widget_invalid_inputs():
    """
    Фикстура для тестирования невалидных входных данных
    """
    return [
        "Счет",  # без номера
        "",  # пустая строка
        "Счет 123 456",  # слишком много частей
        "Invalid 1234567890123456",  # неизвестный тип карты/счета
        None  # None значение
    ]


@pytest.fixture
def valid_datetime_strings():
    """Фикстура, возвращающая список валидных строк с датами и ожидаемыми результатами"""
    return [
        ("2024-03-11T02:26:18.671407", "11.03.2024"),
        ("2023-12-31T23:59:59.999999", "31.12.2023"),
        ("2025-01-01T00:00:00.000000", "01.01.2025"),
    ]


@pytest.fixture
def invalid_datetime_strings():
    """Фикстура, возвращающая список невалидных строк с датами"""
    return [
        "2024/03/11T02:26:18.671407",
        "2024-03-11",
        "invalid_date",
        "",
        "2024-13-11T02:26:18.671407",  # неправильный месяц
        "2024-03-32T02:26:18.671407",  # неправильный день
    ]


@pytest.fixture
def different_time_formats():
    """Фикстура с разными форматами времени"""
    return [
        ("2024-03-11T02:26:18.671407", "11.03.2024"),
        ("2024-03-11T02:26:18", "11.03.2024"),
        ("2024-03-11T02:26", "11.03.2024"),
    ]


@pytest.fixture
def test_data():
    """Фикстура с тестовыми данными"""
    return [
        {"id": 1, "state": "EXECUTED"},
        {"id": 2, "state": "CANCELED"},
        {"id": 3, "state": "EXECUTED"},
        {"id": 4, "state": "PENDING"},
        {"id": 5, "state": "EXECUTED"}
    ]


@pytest.fixture
def empty_data():
    """Фикстура с пустым списком"""
    return []


@pytest.fixture
def processing_test_data():
    """Фикстура с тестовыми данными"""
    return [
        {"id": 1, "date": "2023-07-15T10:00:00.000"},
        {"id": 2, "date": "2023-07-14T15:30:00.000"},
        {"id": 3, "date": "2023-07-16T08:45:00.000"},
        {"id": 4, "date": "2023-07-15T12:20:00.000"}
    ]


@pytest.fixture
def expected_sorted_desc():
    """Фикстура с ожидаемым результатом сортировки по убыванию"""
    return [
        {"id": 3, "date": "2023-07-16T08:45:00.000"},
        {"id": 1, "date": "2023-07-15T10:00:00.000"},
        {"id": 4, "date": "2023-07-15T12:20:00.000"},
        {"id": 2, "date": "2023-07-14T15:30:00.000"}
    ]


@pytest.fixture
def expected_sorted_asc():
    """Фикстура с ожидаемым результатом сортировки по возрастанию"""
    return [
        {"id": 2, "date": "2023-07-14T15:30:00.000"},
        {"id": 1, "date": "2023-07-15T10:00:00.000"},
        {"id": 4, "date": "2023-07-15T12:20:00.000"},
        {"id": 3, "date": "2023-07-16T08:45:00.000"}
    ]


